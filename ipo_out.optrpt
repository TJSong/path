Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(397,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(397,21)
<Remainder>
LOOP END

LOOP BEGIN at path.c(230,5) inlined into path.c(397,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(232,9) inlined into path.c(397,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(397,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(397,21)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(397,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(397,21)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(397,21)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(332,5) inlined into path.c(399,13)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(336,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 335 and call:fprintf(FILE *__restrict__, line 336
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 336 and  line 335

   LOOP BEGIN at path.c(334,9) inlined into path.c(399,13)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(107,5) inlined into path.c(402,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at path.c(107,5) inlined into path.c(402,9)
   remark #15389: vectorization support: reference ori_graph has unaligned access   [ path.c(109,13) ]
   remark #15389: vectorization support: reference ori_graph has unaligned access   [ path.c(109,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.786
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(107,5) inlined into path.c(402,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.c(403,9)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at path.c(246,5) inlined into path.c(411,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 264 and cpd_graph line 259
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 259 and cpd_graph line 264

   LOOP BEGIN at path.c(250,9) inlined into path.c(411,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 264 and cpd_graph line 259
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 259 and cpd_graph line 264
   LOOP END
LOOP END

LOOP BEGIN at path.c(413,9)
   remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(415,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at path.c(456,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at path.c(478,9)
   remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ path.c(479,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at path.c(277,5) inlined into path.c(486,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(281,9) inlined into path.c(486,9)
      remark #15415: vectorization support: gather was generated for the variable cpd_graph:  indirect access    [ path.c(289,37) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.035
      remark #15300: LOOP WAS VECTORIZED
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 59 
      remark #15477: vector loop cost: 31.870 
      remark #15478: estimated potential speedup: 1.820 
      remark #15482: vectorized math library calls: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at path.c(281,9) inlined into path.c(486,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at path.c(316,5) inlined into path.c(492,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 319 and sum2 line 319
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 319 and sum2 line 319
LOOP END

LOOP BEGIN at path.c(332,5) inlined into path.c(496,13)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(336,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 335 and call:fprintf(FILE *__restrict__, line 336
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 336 and  line 335

   LOOP BEGIN at path.c(334,9) inlined into path.c(496,13)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.c(372,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.c(374,9) ]
LOOP END
===========================================================================

Begin optimization report for: shortest_paths(int, int, int, ddt *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(147,5)
   remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
   remark #15382: vectorization support: call to function memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ path.c(159,29) ]
   remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
   remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ path.c(169,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:MPI_Send(const void *, int, line 163 and call:MPI_Recv(void *, int, MPI_D line 169
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 169 and  line 163

   LOOP BEGIN at path.c(151,13)
      remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
      remark #15382: vectorization support: call to function memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ path.c(159,29) ]
      remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
      remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ path.c(169,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:MPI_Send(const void *, int, line 163 and call:MPI_Recv(void *, int, MPI_D line 169
      remark #15346: vector dependence: assumed OUTPUT dependence between  line 169 and  line 163

      LOOP BEGIN at path.c(155,21)
         remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END

      LOOP BEGIN at path.c(155,21)
         remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(163,29) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(175,5)
   remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
   remark #15382: vectorization support: call to function memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ path.c(187,29) ]
   remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
   remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ path.c(197,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:MPI_Send(const void *, int, line 191 and call:MPI_Recv(void *, int, MPI_D line 197
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 197 and  line 191

   LOOP BEGIN at path.c(179,13)
      remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
      remark #15382: vectorization support: call to function memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ path.c(187,29) ]
      remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
      remark #15382: vectorization support: call to function MPI_Recv(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *) cannot be vectorized   [ path.c(197,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:MPI_Send(const void *, int, line 191 and call:MPI_Recv(void *, int, MPI_D line 197
      remark #15346: vector dependence: assumed OUTPUT dependence between  line 197 and  line 191

      LOOP BEGIN at path.c(183,21)
         remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END

      LOOP BEGIN at path.c(183,21)
         remark #15382: vectorization support: call to function MPI_Send(const void *, int, MPI_Datatype, int, int, MPI_Comm) cannot be vectorized   [ path.c(191,29) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(203,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(58,5) inlined into path.c(205,24)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(59,9) inlined into path.c(205,24)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(59,9) inlined into path.c(205,24)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(61,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 2.500 
         remark #15478: estimated potential speedup: 4.150 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(59,9) inlined into path.c(205,24)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(65,5) inlined into path.c(205,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(67,9) inlined into path.c(205,24)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(70,13) inlined into path.c(205,24)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(70,13) inlined into path.c(205,24)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(73,30) ]
         remark #15389: vectorization support: reference col has unaligned access   [ path.c(75,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(70,13) inlined into path.c(205,24)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sgenrand(unsigned long, struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between config line 60 and config line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand(struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(77,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(78,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(78,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(79,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(79,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(82,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(82,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(83,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(83,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.128
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 9.750 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: square(int, ddt *__restrict__, ddt *__restrict__, ddt *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(58,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(59,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at path.c(59,9)
      remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(61,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 4.150 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at path.c(59,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at path.c(65,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(67,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(70,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(70,13)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(73,30) ]
         remark #15389: vectorization support: reference col has unaligned access   [ path.c(75,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(70,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gen_graph(int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(229,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(229,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(230,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(232,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(233,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(233,25)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(233,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(233,25)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(233,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_cpd(ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(246,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 264 and cpd_graph line 259
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 259 and cpd_graph line 264

   LOOP BEGIN at path.c(250,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 264 and cpd_graph line 259
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 259 and cpd_graph line 264
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_ori(ddt *, ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(277,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 289 and cpd_graph line 289
   remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 289 and ori_graph line 289

   LOOP BEGIN at path.c(281,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 289 and cpd_graph line 289
      remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 289 and ori_graph line 289
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fletcher16(ddt *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(316,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 319 and sum2 line 319
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 319 and sum2 line 319
LOOP END
===========================================================================

Begin optimization report for: write_matrix(const char *, int, ddt *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(332,5)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(336,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 335 and call:fprintf(FILE *__restrict__, line 336
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 336 and  line 335

   LOOP BEGIN at path.c(334,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(335,13) ]
   LOOP END
LOOP END
===========================================================================
