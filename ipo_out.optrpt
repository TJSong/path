Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(331,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(331,21)
<Remainder>
LOOP END

LOOP BEGIN at path.c(165,5) inlined into path.c(331,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(167,9) inlined into path.c(331,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(331,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(331,21)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(331,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(331,21)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(331,21)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(265,5) inlined into path.c(333,13)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(268,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(269,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 268 and call:fprintf(FILE *__restrict__, line 269
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 269 and  line 268

   LOOP BEGIN at path.c(267,9) inlined into path.c(333,13)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(268,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(101,5) inlined into path.c(338,9)
   remark #15388: vectorization support: reference ori_graph has aligned access   [ path.c(103,13) ]
   remark #15388: vectorization support: reference ori_graph has aligned access   [ path.c(103,13) ]
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.067
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 0.460 
   remark #15478: estimated potential speedup: 13.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(101,5) inlined into path.c(338,9)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference ori_graph has aligned access   [ path.c(103,13) ]
   remark #15388: vectorization support: reference ori_graph has aligned access   [ path.c(103,13) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.733
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at path.c(101,5) inlined into path.c(338,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.c(339,9)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at path.c(181,5) inlined into path.c(346,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 199 and cpd_graph line 194
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 194 and cpd_graph line 199

   LOOP BEGIN at path.c(185,9) inlined into path.c(346,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 199 and cpd_graph line 194
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 194 and cpd_graph line 199
   LOOP END
LOOP END

LOOP BEGIN at path.c(348,9)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ path.c(351,17) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ path.c(352,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restri line 351 and call:printf(const char *__restri line 352
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 352 and  line 351

   LOOP BEGIN at path.c(350,13)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ path.c(351,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.c(310,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.c(312,9) ]
LOOP END
===========================================================================

Begin optimization report for: sgenrand(unsigned long, struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between config line 60 and config line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand(struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(77,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(78,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(78,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(79,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(79,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(82,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(82,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(83,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(83,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.128
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 9.750 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: square(int, ddt *__restrict__, ddt *__restrict__, ddt *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(55,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(56,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at path.c(56,9)
      remark #15389: vectorization support: reference l_T has unaligned access   [ path.c(58,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.152
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 2.060 
      remark #15478: estimated potential speedup: 3.060 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at path.c(56,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at path.c(62,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(64,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(67,13)
         remark #15389: vectorization support: reference l_T has unaligned access   [ path.c(70,27) ]
         remark #15389: vectorization support: reference l has unaligned access   [ path.c(72,27) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.167
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 23 
         remark #15477: vector loop cost: 3.750 
         remark #15478: estimated potential speedup: 5.570 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(67,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: shortest_paths(int, ddt *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(139,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(55,5) inlined into path.c(141,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(56,9) inlined into path.c(141,16)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(56,9) inlined into path.c(141,16)
         remark #15389: vectorization support: reference l_T has unaligned access   [ path.c(58,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 32
         remark #15309: vectorization support: normalized vectorization overhead 0.152
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 10 
         remark #15477: vector loop cost: 2.060 
         remark #15478: estimated potential speedup: 3.060 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(56,9) inlined into path.c(141,16)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(108,5) inlined into path.c(146,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at path.c(108,5) inlined into path.c(146,5)
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(110,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(110,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.305
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 1.840 
   remark #15478: estimated potential speedup: 3.790 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(108,5) inlined into path.c(146,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(110,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(110,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.677
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at path.c(108,5) inlined into path.c(146,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.c(62,5) inlined into path.c(141,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(64,9) inlined into path.c(141,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(67,13) inlined into path.c(141,16)
         remark #15389: vectorization support: reference l_T has unaligned access   [ path.c(70,27) ]
         remark #15389: vectorization support: reference l has unaligned access   [ path.c(72,27) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.167
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 23 
         remark #15477: vector loop cost: 3.750 
         remark #15478: estimated potential speedup: 5.570 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(67,13) inlined into path.c(141,16)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gen_graph(int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(164,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(164,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(165,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(167,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(168,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(168,25)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(168,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(168,25)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(168,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_cpd(ddt *, ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(181,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 199 and cpd_graph line 194
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 194 and cpd_graph line 199

   LOOP BEGIN at path.c(185,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 199 and cpd_graph line 194
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 194 and cpd_graph line 199
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_ori(ddt *, ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(210,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 222 and cpd_graph line 222
   remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 222 and ori_graph line 222

   LOOP BEGIN at path.c(214,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 222 and cpd_graph line 222
      remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 222 and ori_graph line 222
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fletcher16(ddt *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(249,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 252 and sum2 line 252
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 252 and sum2 line 252
LOOP END
===========================================================================

Begin optimization report for: write_matrix(const char *, int, ddt *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(265,5)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(268,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(269,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 268 and call:fprintf(FILE *__restrict__, line 269
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 269 and  line 268

   LOOP BEGIN at path.c(267,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(268,13) ]
   LOOP END
LOOP END
===========================================================================
