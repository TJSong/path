Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.bk.c(264,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.bk.c(264,14)
<Remainder>
LOOP END

LOOP BEGIN at path.bk.c(173,5) inlined into path.bk.c(264,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.bk.c(175,9) inlined into path.bk.c(264,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.bk.c(264,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.bk.c(264,14)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.bk.c(264,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.bk.c(264,14)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.bk.c(264,14)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.bk.c(218,5) inlined into path.bk.c(266,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(220,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(221,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 220 and call:fprintf(FILE *__restrict__, line 221
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 221 and  line 220

   LOOP BEGIN at path.bk.c(219,9) inlined into path.bk.c(266,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(220,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.bk.c(104,5) inlined into path.bk.c(270,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at path.bk.c(104,5) inlined into path.bk.c(270,5)
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(106,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(106,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.820 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.bk.c(104,5) inlined into path.bk.c(270,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.bk.c(140,5) inlined into path.bk.c(270,5)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at path.bk.c(147,5) inlined into path.bk.c(270,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.bk.c(58,5) inlined into path.bk.c(270,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.bk.c(59,9) inlined into path.bk.c(270,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.bk.c(59,9) inlined into path.bk.c(270,5)
         remark #15389: vectorization support: reference l_T has unaligned access   [ path.bk.c(61,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 2.500 
         remark #15478: estimated potential speedup: 4.150 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.bk.c(59,9) inlined into path.bk.c(270,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.bk.c(111,5) inlined into path.bk.c(270,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at path.bk.c(111,5) inlined into path.bk.c(270,5)
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(113,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(113,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 1.370 
   remark #15478: estimated potential speedup: 7.310 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.bk.c(111,5) inlined into path.bk.c(270,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(113,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(113,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.056
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at path.bk.c(111,5) inlined into path.bk.c(270,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.bk.c(203,5) inlined into path.bk.c(277,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 206 and sum2 line 206
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 206 and sum2 line 206
LOOP END

LOOP BEGIN at path.bk.c(218,5) inlined into path.bk.c(281,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(220,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(221,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 220 and call:fprintf(FILE *__restrict__, line 221
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 221 and  line 220

   LOOP BEGIN at path.bk.c(219,9) inlined into path.bk.c(281,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.bk.c(220,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.bk.c(65,5) inlined into path.bk.c(270,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.bk.c(67,9) inlined into path.bk.c(270,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.bk.c(70,13) inlined into path.bk.c(270,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.bk.c(70,13) inlined into path.bk.c(270,5)
         remark #15389: vectorization support: reference l_T has unaligned access   [ path.bk.c(73,27) ]
         remark #15389: vectorization support: reference l has unaligned access   [ path.bk.c(75,27) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.bk.c(70,13) inlined into path.bk.c(270,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.bk.c(249,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.bk.c(251,9) ]
LOOP END
===========================================================================
